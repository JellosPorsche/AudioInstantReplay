<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:AudioInstantReplay"
        xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
        x:Class="AudioInstantReplay.MainWindow"
        mc:Ignorable="d"
        Title="Audio Instant Replay" Height="{Binding MainWindowHeight, UpdateSourceTrigger=PropertyChanged}" Width="250"
        MaxHeight="{Binding MainWindowHeight, UpdateSourceTrigger=PropertyChanged}" MaxWidth="250"
        MinHeight="{Binding MainWindowHeight, UpdateSourceTrigger=PropertyChanged}" MinWidth="250"
        SizeToContent="Height"
        ResizeMode="NoResize"
        Icon="StartRec.ico"
        Closing="Window_Closing">
    <Window.Resources>
        <!--Icon Button Style-->
        <Style x:Key="IconButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" 
                        BorderBrush="Transparent" 
                        Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="border" Property="BorderBrush" Value="Transparent" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--ValidationTemplate-->
        <ControlTemplate x:Key="validationTemplate">
            <AdornerDecorator>
                <Grid>
                    <Border Background="#11FF0000" BorderBrush="#FFFF0000" BorderThickness="1" IsHitTestVisible="False"/>
                    <Polygon 
            Fill="#FFFF0000" 
            Points="0,0 10,0 10,10" 
            HorizontalAlignment="Right">
                        <Polygon.ToolTip>
                            <ItemsControl ItemsSource="{Binding}">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding ErrorContent}" />
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </Polygon.ToolTip>
                    </Polygon>
                    <AdornedElementPlaceholder x:Name="adorner"/>
                </Grid>
            </AdornerDecorator>
        </ControlTemplate>

        <!--Visibilty Converter-->
        <BooleanToVisibilityConverter x:Key="boolToVis"/>

        <!--Combobox Style-->
        <ControlTemplate x:Key="ComboBoxControlTemplate" TargetType="{x:Type ComboBox}">
            <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                </Grid.ColumnDefinitions>
                <Popup x:Name="PART_Popup" AllowsTransparency="True" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                    <Themes:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                        <Border x:Name="DropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                            <ScrollViewer x:Name="DropDownScrollViewer">
                                <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                        <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}" Height="{Binding ActualHeight, ElementName=DropDownBorder}" Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                                    </Canvas>
                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </Themes:SystemDropShadowChrome>
                </Popup>
                <ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                    <ToggleButton.Style>
                        <Style TargetType="{x:Type ToggleButton}">
                            <Setter Property="OverridesDefaultStyle" Value="True"/>
                            <Setter Property="IsTabStop" Value="False"/>
                            <Setter Property="Focusable" Value="False"/>
                            <Setter Property="ClickMode" Value="Press"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                        <Border x:Name="templateRoot" BorderBrush="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                                            <Border.Background>
                                                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                    <GradientStop Color="{TemplateBinding Foreground}" Offset="0"/>
                                                    <GradientStop Color="{TemplateBinding Foreground}" Offset="1"/>
                                                </LinearGradientBrush>
                                            </Border.Background>
                                            <Border x:Name="splitBorder" BorderBrush="Transparent" BorderThickness="1" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="True" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                                <Path x:Name="Arrow" Data="F1M0,0L2.667,2.66665 5.3334,0 5.3334,-1.78168 2.6667,0.88501 0,-1.78168 0,0z" Fill="#FF606060" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center"/>
                                            </Border>
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Background" TargetName="templateRoot" Value="White"/>
                                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FFABADB3"/>
                                                <Setter Property="Background" TargetName="splitBorder" Value="Transparent"/>
                                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="Transparent"/>
                                            </MultiDataTrigger>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Fill" TargetName="Arrow" Value="Black"/>
                                            </Trigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Background" TargetName="templateRoot">
                                                    <Setter.Value>
                                                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                            <GradientStop Color="#FFECF4FC" Offset="0"/>
                                                            <GradientStop Color="#FFDCECFC" Offset="1"/>
                                                        </LinearGradientBrush>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FF7EB4EA"/>
                                            </MultiDataTrigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Background" TargetName="templateRoot" Value="White"/>
                                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FF7EB4EA"/>
                                                <Setter Property="Background" TargetName="splitBorder">
                                                    <Setter.Value>
                                                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                            <GradientStop Color="#FFEBF4FC" Offset="0"/>
                                                            <GradientStop Color="#FFDCECFC" Offset="1"/>
                                                        </LinearGradientBrush>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="#FF7EB4EA"/>
                                            </MultiDataTrigger>
                                            <Trigger Property="IsPressed" Value="True">
                                                <Setter Property="Fill" TargetName="Arrow" Value="Black"/>
                                            </Trigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Background" TargetName="templateRoot">
                                                    <Setter.Value>
                                                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                            <GradientStop Color="#FFDAECFC" Offset="0"/>
                                                            <GradientStop Color="#FFC4E0FC" Offset="1"/>
                                                        </LinearGradientBrush>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FF569DE5"/>
                                            </MultiDataTrigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Background" TargetName="templateRoot" Value="White"/>
                                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FF569DE5"/>
                                                <Setter Property="Background" TargetName="splitBorder">
                                                    <Setter.Value>
                                                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                            <GradientStop Color="#FFDAEBFC" Offset="0"/>
                                                            <GradientStop Color="#FFC4E0FC" Offset="1"/>
                                                        </LinearGradientBrush>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="#FF569DE5"/>
                                            </MultiDataTrigger>
                                            <Trigger Property="IsEnabled" Value="False">
                                                <Setter Property="Fill" TargetName="Arrow" Value="#FFBFBFBF"/>
                                            </Trigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Background" TargetName="templateRoot" Value="#FFF0F0F0"/>
                                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FFD9D9D9"/>
                                            </MultiDataTrigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Background" TargetName="templateRoot" Value="White"/>
                                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FFBFBFBF"/>
                                                <Setter Property="Background" TargetName="splitBorder" Value="Transparent"/>
                                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="Transparent"/>
                                            </MultiDataTrigger>

                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ToggleButton.Style>
                </ToggleButton>
                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
                    <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                    <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
                </Trigger>
                <Trigger Property="HasItems" Value="False">
                    <Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsGrouping" Value="True"/>
                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                </MultiTrigger>
                <Trigger Property="CanContentScroll" SourceName="DropDownScrollViewer" Value="False">
                    <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                    <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </Window.Resources>

    <!--Main Grid-->
    <Grid>
        <!--Column Definitions-->
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="3"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="3"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <!--Row Definitions-->
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="{Binding SettingsGridHeight, UpdateSourceTrigger=PropertyChanged}"/>
            <RowDefinition Height="3"/>
        </Grid.RowDefinitions>

        <!--Saved to Message-->
        <Border Grid.Column="2" Panel.ZIndex="1" Width="70" Height="30" BorderThickness="1" BorderBrush="#4889c7" Background="#b6dcfe"
                Visibility="{Binding SavedMsgVis, Converter={StaticResource boolToVis}, UpdateSourceTrigger=PropertyChanged}">
            <TextBlock HorizontalAlignment="Center" FontSize="20" Text="Saved" Foreground="#4889c7"/>
        </Border>

        <!--Start Button-->
        <Button Grid.Column="0" Margin="0,-10,0,0" Click="Button_StartStop_Click" Background="Transparent" BorderBrush="Transparent"
                IsEnabled="{Binding StartRecVis, UpdateSourceTrigger=PropertyChanged}"
                Visibility="{Binding StartRecVis, Converter={StaticResource boolToVis}, UpdateSourceTrigger=PropertyChanged}"
                Style="{StaticResource IconButtonStyle}">
            <Image Source="pack://application:,,,/Resources/StartRec.png"/>
        </Button>
        <TextBlock Grid.Column="0" VerticalAlignment="Bottom" HorizontalAlignment="Center" FontSize="12" Foreground="#4889c7"
                   Visibility="{Binding StartRecVis, Converter={StaticResource boolToVis}, UpdateSourceTrigger=PropertyChanged}"><Run Text="Start"/></TextBlock>

        <!--Stop Button-->
        <Button Grid.Column="0" Margin="0,-10,0,0" Click="Button_StartStop_Click" Background="Transparent" BorderBrush="Transparent"
                IsEnabled="{Binding StopRecVis, UpdateSourceTrigger=PropertyChanged}"
                Visibility="{Binding StopRecVis, Converter={StaticResource boolToVis}, UpdateSourceTrigger=PropertyChanged}"
                Style="{StaticResource IconButtonStyle}">
            <Image Source="pack://application:,,,/Resources/StopRec.png"/>
        </Button>
        <TextBlock Grid.Column="0" VerticalAlignment="Bottom" HorizontalAlignment="Center" FontSize="12" Foreground="#4889c7"
                   Visibility="{Binding StopRecVis, Converter={StaticResource boolToVis}, UpdateSourceTrigger=PropertyChanged}"><Run Text="Stop"/></TextBlock>

        <!--Separator-->
        <Rectangle Grid.Column="1" VerticalAlignment="Stretch" Width="1" HorizontalAlignment="Center" Stroke="#4889c7" />

        <!--Save Button-->
        <Button Grid.Column="2" Margin="0,-10,0,0" Click="Button_Save_Click" Background="Transparent" BorderBrush="Transparent" 
                Visibility="{Binding StopRecVis, Converter={StaticResource boolToVis}, UpdateSourceTrigger=PropertyChanged}"
                IsEnabled="{Binding StopRecVis, UpdateSourceTrigger=PropertyChanged}"
                Style="{StaticResource IconButtonStyle}">
            <Image Source="pack://application:,,,/Resources/Save.png"/>
        </Button>
        <TextBlock Grid.Column="2" VerticalAlignment="Bottom" HorizontalAlignment="Center" FontSize="12" Foreground="#4889c7"><Run Text="Save"/></TextBlock>

        <!--Save Disabled Button-->
        <Button Grid.Column="2" Margin="0,-10,0,0" Background="Transparent" BorderBrush="Transparent" 
                Visibility="{Binding StartRecVis, Converter={StaticResource boolToVis}, UpdateSourceTrigger=PropertyChanged}"
                Style="{StaticResource IconButtonStyle}">
            <Image Source="pack://application:,,,/Resources/SaveDisable.png"/>
        </Button>

        <!--Separator-->
        <Rectangle Grid.Column="3" VerticalAlignment="Stretch" Width="1" HorizontalAlignment="Center" Stroke="#4889c7" />

        <!--Settings Button-->
        <Button Grid.Column="4" Margin="0,-10,0,0" Background="Transparent" BorderBrush="Transparent" Click="Button_Settings_Click"
                Style="{StaticResource IconButtonStyle}">
            <Image Source="pack://application:,,,/Resources/Settings.png"/>
        </Button>
        <TextBlock Grid.Column="4" VerticalAlignment="Bottom" HorizontalAlignment="Center" FontSize="12" Foreground="#4889c7"><Run Text="Settings"/></TextBlock>

        <!--Progress Bar-->
        <ProgressBar Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="5" BorderThickness="0" Background="Transparent" Foreground="#4889c7" IsIndeterminate="True"
                     Visibility="{Binding StopRecVis, Converter={StaticResource boolToVis}, UpdateSourceTrigger=PropertyChanged}"/>

        <!--Settings-->
        <Separator Grid.Row="1" Background="#4889c7" Grid.ColumnSpan="5" VerticalAlignment="Top" Margin="2,2,2,2"/>

        <!--Output Location-->
        <TextBlock Grid.Row="1" FontSize="9" Margin="2,3,0,0" Foreground="#4889c7" Text="Output Location:"/>
        <TextBox Grid.Row="1" Margin="0,16,40,0" Grid.ColumnSpan="5" Width="190" Height="20" Foreground="#4889c7" BorderBrush="#4889c7" VerticalAlignment="Top"
                 VerticalContentAlignment="Center" IsReadOnly="True" Text="{Binding OutputLocation, UpdateSourceTrigger=PropertyChanged}"/>
        <Button Grid.Row="1" Grid.Column="5" Content="Browse"  Margin="0,16,3,0" Foreground="#4889c7" Background="#b6dcfe"
                HorizontalAlignment="Right" VerticalContentAlignment="Center" VerticalAlignment="Top" BorderBrush="#4889c7"
                Width="40" Height="20" FontSize="10"
                Click="Button_Browse_Click"/>

        <!--Replay Duration-->
        <TextBlock Grid.Row="1" FontSize="9" Margin="2,0,0,22" Foreground="{Binding SettingControlDarkColor, UpdateSourceTrigger=PropertyChanged}" Text="Replay Duration:" VerticalAlignment="Bottom"
                   ToolTip="{Binding DisabledSettingTooltip, UpdateSourceTrigger=PropertyChanged}"/>
        <TextBox Grid.Row="1" Margin="2,16,40,2" Grid.ColumnSpan="3" Width="50" HorizontalAlignment="Left" Height="20" 
                 Validation.ErrorTemplate="{StaticResource validationTemplate}"
                 Foreground="{Binding SettingControlDarkColor, UpdateSourceTrigger=PropertyChanged}" 
                 BorderBrush="{Binding SettingControlDarkColor, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Bottom"
                 IsEnabled="{Binding StartRecVis, UpdateSourceTrigger=PropertyChanged}" HorizontalContentAlignment="Center" VerticalContentAlignment="Center">
            <TextBox.Text>
                <Binding Path="ReplayDuration"
                         UpdateSourceTrigger="PropertyChanged" >
                    <Binding.ValidationRules>
                        <local:DurationRangeRule Min="10" Max="1200"/>
                    </Binding.ValidationRules>
                </Binding>
            </TextBox.Text>
            <TextBox.Style>
                <Style TargetType="TextBox">
                    <Style.Triggers>
                        <Trigger Property="Validation.HasError" Value="true">
                            <Setter Property="ToolTip"
                                    Value="{Binding RelativeSource={x:Static RelativeSource.Self},
                        Path=(Validation.Errors)/ErrorContent}"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </TextBox.Style>
        </TextBox>
        <TextBlock Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="3" FontSize="9" Margin="55,0,0,6" 
                   Foreground="{Binding SettingControlDarkColor, UpdateSourceTrigger=PropertyChanged}" 
                   Text="Seconds" VerticalAlignment="Bottom"
                   ToolTip="{Binding DisabledSettingTooltip, UpdateSourceTrigger=PropertyChanged}"/>

        <!--Mic Input Selection-->
        <TextBlock Grid.Row="1" Grid.Column="2" Grid.ColumnSpan="3" FontSize="9" Margin="2,0,70,22" 
                   Foreground="{Binding SettingControlDarkColor, UpdateSourceTrigger=PropertyChanged}" 
                   Text="Input Device:" 
                   VerticalAlignment="Bottom" HorizontalAlignment="Right"
                   ToolTip="{Binding DisabledSettingTooltip, UpdateSourceTrigger=PropertyChanged}"/>
        <ComboBox Grid.Row="1" Grid.Column="2" 
                  Template="{DynamicResource ComboBoxControlTemplate}"
                  ItemsSource="{Binding InputDevices, UpdateSourceTrigger=PropertyChanged}"
                  DisplayMemberPath="Name"
                  SelectedValuePath="DeviceId"
                  SelectedValue="{Binding SelectedInputDevice, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                  Margin="2,16,2,2" Grid.ColumnSpan="3" Width="120" Height="20" Foreground="{Binding SettingControlLightColor, UpdateSourceTrigger=PropertyChanged}" BorderBrush="#4889c7" 
                  VerticalAlignment="Bottom" HorizontalAlignment="Right" Background="{Binding SettingControlDarkColor, UpdateSourceTrigger=PropertyChanged}"
                  IsEnabled="{Binding StartRecVis, UpdateSourceTrigger=PropertyChanged}">
            <ComboBox.Resources>
                <Style TargetType="TextBlock">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType=ComboBox}}" Value="False">
                            <Setter Property="Foreground" Value="#bcbcbc" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </ComboBox.Resources>
        </ComboBox>
    </Grid>
</Window>
